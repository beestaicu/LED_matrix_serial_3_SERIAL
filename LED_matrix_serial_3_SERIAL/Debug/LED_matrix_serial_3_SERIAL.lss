
LED_matrix_serial_3_SERIAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000019e  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800106  00800106  00000238  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000940  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f5  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000044b  00000000  00000000  00001445  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001890  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e0  00000000  00000000  00001dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001f9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  9e:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
uint8_t RX_flag = 0;
uint8_t index1 = 0;
char col[] = {0xFE,0xFD,0xFB,0xf7,0xEF};
char raw[] = {0x0,0x0,0x0,0x0,0x0};

ISR(USART_RX_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	buffer[index1] = UDR0; // Read USART data register
  c8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <index1>
  cc:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  d0:	e8 2f       	mov	r30, r24
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	e4 5f       	subi	r30, 0xF4	; 244
  d6:	fe 4f       	sbci	r31, 0xFE	; 254
  d8:	90 83       	st	Z, r25
	index1++;
  da:	8f 5f       	subi	r24, 0xFF	; 255
  dc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <index1>
	if (index1 ==5){
  e0:	85 30       	cpi	r24, 0x05	; 5
  e2:	51 f4       	brne	.+20     	; 0xf8 <__vector_18+0x52>
		strncpy(raw, buffer,5); //copy buffer
  e4:	45 e0       	ldi	r20, 0x05	; 5
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	6c e0       	ldi	r22, 0x0C	; 12
  ea:	71 e0       	ldi	r23, 0x01	; 1
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	0e 94 be 00 	call	0x17c	; 0x17c <strncpy>
		index1 =0;
  f4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <index1>
		} 
}// end ISR USART
  f8:	ff 91       	pop	r31
  fa:	ef 91       	pop	r30
  fc:	bf 91       	pop	r27
  fe:	af 91       	pop	r26
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	7f 91       	pop	r23
 106:	6f 91       	pop	r22
 108:	5f 91       	pop	r21
 10a:	4f 91       	pop	r20
 10c:	3f 91       	pop	r19
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <main>:

int main(void)
{
	DDRB = 0x3F;
 11a:	8f e3       	ldi	r24, 0x3F	; 63
 11c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	87 b9       	out	0x07, r24	; 7
	USART0Init();
 122:	0e 94 ab 00 	call	0x156	; 0x156 <USART0Init>
	sei();
 126:	78 94       	sei
 128:	26 e0       	ldi	r18, 0x06	; 6
 12a:	31 e0       	ldi	r19, 0x01	; 1
	for (int i=0;i<6;i++){
		PORTC=col[i];
		PORTB=buffer[i];
		delay;
		PORTB=0x00;
		PORTC=0xFF;
 12c:	9f ef       	ldi	r25, 0xFF	; 255
 12e:	e0 e0       	ldi	r30, 0x00	; 0
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	ac e0       	ldi	r26, 0x0C	; 12
 134:	b1 e0       	ldi	r27, 0x01	; 1
	sei();
	   
    while (1) 
    {
	for (int i=0;i<6;i++){
		PORTC=col[i];
 136:	81 91       	ld	r24, Z+
 138:	88 b9       	out	0x08, r24	; 8
		PORTB=buffer[i];
 13a:	8d 91       	ld	r24, X+
 13c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	cf e9       	ldi	r28, 0x9F	; 159
 140:	df e0       	ldi	r29, 0x0F	; 15
 142:	21 97       	sbiw	r28, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <main+0x28>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x2e>
 148:	00 00       	nop
		delay;
		PORTB=0x00;
 14a:	15 b8       	out	0x05, r1	; 5
		PORTC=0xFF;
 14c:	98 b9       	out	0x08, r25	; 8
	USART0Init();
	sei();
	   
    while (1) 
    {
	for (int i=0;i<6;i++){
 14e:	e2 17       	cp	r30, r18
 150:	f3 07       	cpc	r31, r19
 152:	89 f7       	brne	.-30     	; 0x136 <main+0x1c>
 154:	ec cf       	rjmp	.-40     	; 0x12e <main+0x14>

00000156 <USART0Init>:

 
void USART0Init(void)
{
	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_VALUE>>8);
 156:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t)UBRR_VALUE;
 15a:	87 e6       	ldi	r24, 0x67	; 103
 15c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 160:	e2 ec       	ldi	r30, 0xC2	; 194
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	86 60       	ori	r24, 0x06	; 6
 168:	80 83       	st	Z, r24
	//enable transmission and reception
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 16a:	e1 ec       	ldi	r30, 0xC1	; 193
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	88 61       	ori	r24, 0x18	; 24
 172:	80 83       	st	Z, r24
	// Enable the USART Receive interrupt
	UCSR0B |= (1 << RXCIE0 );
 174:	80 81       	ld	r24, Z
 176:	80 68       	ori	r24, 0x80	; 128
 178:	80 83       	st	Z, r24
 17a:	08 95       	ret

0000017c <strncpy>:
 17c:	fb 01       	movw	r30, r22
 17e:	dc 01       	movw	r26, r24
 180:	41 50       	subi	r20, 0x01	; 1
 182:	50 40       	sbci	r21, 0x00	; 0
 184:	48 f0       	brcs	.+18     	; 0x198 <strncpy+0x1c>
 186:	01 90       	ld	r0, Z+
 188:	0d 92       	st	X+, r0
 18a:	00 20       	and	r0, r0
 18c:	c9 f7       	brne	.-14     	; 0x180 <strncpy+0x4>
 18e:	01 c0       	rjmp	.+2      	; 0x192 <strncpy+0x16>
 190:	1d 92       	st	X+, r1
 192:	41 50       	subi	r20, 0x01	; 1
 194:	50 40       	sbci	r21, 0x00	; 0
 196:	e0 f7       	brcc	.-8      	; 0x190 <strncpy+0x14>
 198:	08 95       	ret

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
